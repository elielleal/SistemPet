package br.com.pet.bean;

import java.sql.SQLException;
import java.util.ArrayList;

import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.model.ListDataModel;

import br.com.pet.DAO.FornecedoresDAO;
import br.com.pet.domain.Fornecedores;
import br.com.pet.util.JSFUtil;

@ManagedBean(name = "MBFornecedores")
@ViewScoped
public class FornecedoresBean {
	
	private Fornecedores fornecedores;
	
	public Fornecedores getFornecedores() {
		return fornecedores;
	}

	public void setFornecedores(Fornecedores fornecedores) {
		this.fornecedores = fornecedores;
	}

	private ListDataModel<Fornecedores> itens;

	public ListDataModel<Fornecedores> getItens() {
		return itens;
	}

	public void setItens(ListDataModel<Fornecedores> itens) {
		this.itens = itens;
	}
	
	@PostConstruct
	public void prepararPesquisa(){
		try {
			FornecedoresDAO fdao = new FornecedoresDAO();
			
			ArrayList<Fornecedores>lista = fdao.Listar();
			itens = new ListDataModel<Fornecedores>(lista);
		} catch (SQLException e) {
			JSFUtil.adicionarMensagemErro("e.getMessage()");
			e.printStackTrace();
		}
	}
	
	public void prepararNovo(){
		fornecedores = new Fornecedores();
	}
	
	public void novo(){
		try {
			FornecedoresDAO fdao = new FornecedoresDAO();
			fdao.save(fornecedores);
			
						
			ArrayList<Fornecedores>lista = fdao.Listar();
			itens = new ListDataModel<Fornecedores>(lista);
			JSFUtil.adicionarMensagemSucesso("Fornecedor Salvo com Sucesso");
		} catch (Exception e) {
			JSFUtil.adicionarMensagemErro("e.getMessage()");
			e.printStackTrace();
		}
	}
	
	public void prepararExcluir(){
		fornecedores = itens.getRowData();
	}
	
	public void excluir(){
		try {
			FornecedoresDAO fdao = new FornecedoresDAO();
			fdao.delete(fornecedores);
			
						
			ArrayList<Fornecedores>lista = fdao.Listar();
			itens = new ListDataModel<Fornecedores>(lista);
			JSFUtil.adicionarMensagemSucesso("Fornecedor Excluído com Sucesso");
		} catch (Exception e) {
			JSFUtil.adicionarMensagemErro("Não é possivel excluir um Fornecedor associado a um Produto()");
			e.printStackTrace();
		}
	}
	
	public void prepararEditar(){
		fornecedores = itens.getRowData();
	}
	
	public void editar(){
		try {
			FornecedoresDAO fdao = new FornecedoresDAO();
			fdao.update(fornecedores);
			
						
			ArrayList<Fornecedores>lista = fdao.Listar();
			itens = new ListDataModel<Fornecedores>(lista);
			JSFUtil.adicionarMensagemSucesso("Fornecedor Excluído com Sucesso");
		} catch (Exception e) {
			JSFUtil.adicionarMensagemErro("Não é possivel excluir um Fornecedor associado a um Produto()");
			e.printStackTrace();
		}
	}
}
