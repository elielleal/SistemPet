package br.com.pet.bean;

import java.sql.SQLException;
import java.util.ArrayList;

import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;


import br.com.pet.DAO.FornecedoresDAO;
import br.com.pet.domain.Fornecedores;
import br.com.pet.util.JSFUtil;

@ManagedBean(name = "MBFornecedores")
@ViewScoped
public class FornecedoresBean {
	
	private Fornecedores fornecedores;
	private ArrayList<Fornecedores> itens;
	private ArrayList<Fornecedores> itensFiltrados;
	private ArrayList<Fornecedores>comboFornecedores;
	
	public ArrayList<Fornecedores> getComboFornecedores() {
		return comboFornecedores;
	}
	public void setComboFornecedores(ArrayList<Fornecedores> comboFornecedores) {
		this.comboFornecedores = comboFornecedores;
	}
	
	public Fornecedores getFornecedores() {
		return fornecedores;
	}

	public void setFornecedores(Fornecedores fornecedores) {
		this.fornecedores = fornecedores;
	}

	public ArrayList<Fornecedores> getItens() {
		return itens;
	}
	
	public void setItens(ArrayList<Fornecedores> itens) {
		this.itens = itens;
	}
	
	public ArrayList<Fornecedores> getItensFiltrados() {
		return itensFiltrados;
	}
	public void setItensFiltrados(ArrayList<Fornecedores> itensFiltrados) {
		this.itensFiltrados = itensFiltrados;
	}
	
	@PostConstruct
	public void prepararPesquisa(){
		try {
			FornecedoresDAO fdao = new FornecedoresDAO();
			
			itens = fdao.Listar();
			
		} catch (SQLException e) {
			JSFUtil.adicionarMensagemErro("e.getMessage()");
			e.printStackTrace();
		}
	}
	
	public void prepararNovo(){
		fornecedores = new Fornecedores();
	}
	
	public void novo(){
		try {
			FornecedoresDAO fdao = new FornecedoresDAO();
			fdao.save(fornecedores);
			
						
			itens = fdao.Listar();
			
			JSFUtil.adicionarMensagemSucesso("Fornecedor Salvo com Sucesso");
		} catch (Exception e) {
			JSFUtil.adicionarMensagemErro("e.getMessage()");
			e.printStackTrace();
		}
	}
	
	
	
	public void excluir(){
		try {
			FornecedoresDAO fdao = new FornecedoresDAO();
			fdao.delete(fornecedores);
			
						
			itens = fdao.Listar();
			
			JSFUtil.adicionarMensagemSucesso("Fornecedor Excluído com Sucesso");
		} catch (Exception e) {
			JSFUtil.adicionarMensagemErro("Não é possivel excluir um Fornecedor associado a um Produto()");
			e.printStackTrace();
		}
	}
	
	public void editar(){
		try {
			FornecedoresDAO fdao = new FornecedoresDAO();
			fdao.update(fornecedores);
			
						
			itens = fdao.Listar();
			
			JSFUtil.adicionarMensagemSucesso("Fornecedor Editado com Sucesso");
		} catch (Exception e) {
			JSFUtil.adicionarMensagemErro("e.getMessage()");
			e.printStackTrace();
		}
	}
}
